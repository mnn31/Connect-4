{"ast":null,"code":"var _jsxFileName = \"/Users/manan/school/APCS/Programming Projects/27MananG_FinalProject/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { Container, Box, Typography, Alert, Button } from '@mui/material';\nimport GameBoard from './components/GameBoard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = createTheme({\n  palette: {\n    mode: 'dark',\n    primary: {\n      main: '#ffeb3b' // Yellow for player 1\n    },\n    secondary: {\n      main: '#f50057' // Red for player 2 (AI)\n    }\n  }\n});\nfunction App() {\n  _s();\n  const [board, setBoard] = useState(Array(6).fill().map(() => Array(7).fill(0)));\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(0);\n  const [error, setError] = useState(null);\n  const [isAIMove, setIsAIMove] = useState(false);\n  useEffect(() => {\n    fetchBoardState();\n  }, []);\n\n  // Add effect to handle automatic reset\n  useEffect(() => {\n    let resetTimer;\n    if (gameOver && winner !== 0) {\n      console.log('Game over, setting reset timer...');\n      // Show win message for 2 seconds before resetting\n      resetTimer = setTimeout(async () => {\n        console.log('Resetting game...');\n        await resetGame();\n      }, 2000);\n    }\n    return () => {\n      if (resetTimer) {\n        clearTimeout(resetTimer);\n      }\n    };\n  }, [gameOver, winner]);\n  const fetchBoardState = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/board');\n      const data = await response.text();\n      const [boardState, gameState] = data.split('|');\n\n      // Parse board state\n      const boardArray = boardState.split(',').filter(cell => cell !== '').map(Number);\n      const newBoard = [];\n      for (let i = 0; i < 6; i++) {\n        newBoard.push(boardArray.slice(i * 7, (i + 1) * 7));\n      }\n      setBoard(newBoard);\n\n      // Parse game state\n      const [isOver, winnerValue] = gameState.split(',').map(Number);\n      setGameOver(isOver);\n      setWinner(winnerValue);\n    } catch (error) {\n      console.error('Error fetching board state:', error);\n    }\n  };\n  const makeMove = async column => {\n    if (gameOver || isAIMove) return;\n    try {\n      const formData = new URLSearchParams();\n      formData.append('column', column);\n      const response = await fetch('http://localhost:8080/move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: formData.toString()\n      });\n      if (!response.ok) {\n        throw new Error('Move failed');\n      }\n      const data = await response.text();\n      const [boardState, gameState] = data.split('|');\n\n      // Parse board state\n      const boardArray = boardState.split(',').filter(cell => cell !== '').map(Number);\n      const newBoard = [];\n      for (let i = 0; i < 6; i++) {\n        newBoard.push(boardArray.slice(i * 7, (i + 1) * 7));\n      }\n      setBoard(newBoard);\n\n      // Parse game state\n      const [isOver, winnerValue] = gameState.split(',').map(Number);\n      setGameOver(isOver);\n      setWinner(winnerValue);\n\n      // If game is not over, trigger AI move after a delay\n      if (!isOver) {\n        setIsAIMove(true);\n        setTimeout(() => {\n          makeAIMove();\n        }, 1000);\n      }\n    } catch (error) {\n      console.error('Error making move:', error);\n    }\n  };\n  const makeAIMove = async () => {\n    try {\n      // Find available columns\n      const availableColumns = [];\n      for (let col = 0; col < 7; col++) {\n        if (board[0][col] === 0) {\n          availableColumns.push(col);\n        }\n      }\n      if (availableColumns.length > 0) {\n        // Randomly select a column\n        const randomCol = availableColumns[Math.floor(Math.random() * availableColumns.length)];\n        const formData = new URLSearchParams();\n        formData.append('column', randomCol);\n        const response = await fetch('http://localhost:8080/move', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          body: formData.toString()\n        });\n        if (!response.ok) {\n          throw new Error('AI move failed');\n        }\n        const data = await response.text();\n        const [boardState, gameState] = data.split('|');\n\n        // Parse board state\n        const boardArray = boardState.split(',').filter(cell => cell !== '').map(Number);\n        const newBoard = [];\n        for (let i = 0; i < 6; i++) {\n          newBoard.push(boardArray.slice(i * 7, (i + 1) * 7));\n        }\n        setBoard(newBoard);\n\n        // Parse game state\n        const [isOver, winnerValue] = gameState.split(',').map(Number);\n        setGameOver(isOver);\n        setWinner(winnerValue);\n      }\n    } catch (error) {\n      console.error('Error making AI move:', error);\n    } finally {\n      setIsAIMove(false);\n    }\n  };\n  const resetGame = async () => {\n    try {\n      console.log('Resetting game...');\n      const response = await fetch('http://localhost:8080/reset', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Reset failed');\n      }\n      await fetchBoardState();\n      setGameOver(false);\n      setWinner(0);\n      setIsAIMove(false);\n    } catch (error) {\n      console.error('Error resetting game:', error);\n    }\n  };\n  const getGameStatus = () => {\n    if (gameOver && winner !== 0) {\n      return winner === 1 ? \"You Win! ðŸŽ‰\" : \"AI Wins! ðŸ¤–\";\n    }\n    return isAIMove ? \"AI is thinking... ðŸ¤”\" : \"Your turn - Drop a piece! ðŸ‘‡\";\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"sm\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          minHeight: '100vh',\n          py: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          component: \"h1\",\n          gutterBottom: true,\n          children: \"Connect 4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          color: \"primary\",\n          sx: {\n            mb: 3,\n            fontWeight: 'bold',\n            textAlign: 'center'\n          },\n          children: getGameStatus()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n          board: board,\n          onColumnClick: makeMove,\n          gameOver: gameOver,\n          winner: winner,\n          onReset: resetGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"N7ovdOtXEqUgwDwbFFDg/+tguUk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ThemeProvider","createTheme","CssBaseline","Container","Box","Typography","Alert","Button","GameBoard","jsxDEV","_jsxDEV","theme","palette","mode","primary","main","secondary","App","_s","board","setBoard","Array","fill","map","gameOver","setGameOver","winner","setWinner","error","setError","isAIMove","setIsAIMove","fetchBoardState","resetTimer","console","log","setTimeout","resetGame","clearTimeout","response","fetch","data","text","boardState","gameState","split","boardArray","filter","cell","Number","newBoard","i","push","slice","isOver","winnerValue","makeMove","column","formData","URLSearchParams","append","method","headers","body","toString","ok","Error","makeAIMove","availableColumns","col","length","randomCol","Math","floor","random","getGameStatus","children","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","sx","display","flexDirection","alignItems","minHeight","py","variant","component","gutterBottom","color","mb","fontWeight","textAlign","onColumnClick","onReset","_c","$RefreshReg$"],"sources":["/Users/manan/school/APCS/Programming Projects/27MananG_FinalProject/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { Container, Box, Typography, Alert, Button } from '@mui/material';\nimport GameBoard from './components/GameBoard';\n\nconst theme = createTheme({\n  palette: {\n    mode: 'dark',\n    primary: {\n      main: '#ffeb3b', // Yellow for player 1\n    },\n    secondary: {\n      main: '#f50057', // Red for player 2 (AI)\n    },\n  },\n});\n\nfunction App() {\n  const [board, setBoard] = useState(Array(6).fill().map(() => Array(7).fill(0)));\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(0);\n  const [error, setError] = useState(null);\n  const [isAIMove, setIsAIMove] = useState(false);\n\n  useEffect(() => {\n    fetchBoardState();\n  }, []);\n\n  // Add effect to handle automatic reset\n  useEffect(() => {\n    let resetTimer;\n    if (gameOver && winner !== 0) {\n      console.log('Game over, setting reset timer...');\n      // Show win message for 2 seconds before resetting\n      resetTimer = setTimeout(async () => {\n        console.log('Resetting game...');\n        await resetGame();\n      }, 2000);\n    }\n    return () => {\n      if (resetTimer) {\n        clearTimeout(resetTimer);\n      }\n    };\n  }, [gameOver, winner]);\n\n  const fetchBoardState = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/board');\n      const data = await response.text();\n      const [boardState, gameState] = data.split('|');\n      \n      // Parse board state\n      const boardArray = boardState.split(',')\n        .filter(cell => cell !== '')\n        .map(Number);\n      \n      const newBoard = [];\n      for (let i = 0; i < 6; i++) {\n        newBoard.push(boardArray.slice(i * 7, (i + 1) * 7));\n      }\n      setBoard(newBoard);\n\n      // Parse game state\n      const [isOver, winnerValue] = gameState.split(',').map(Number);\n      setGameOver(isOver);\n      setWinner(winnerValue);\n    } catch (error) {\n      console.error('Error fetching board state:', error);\n    }\n  };\n\n  const makeMove = async (column) => {\n    if (gameOver || isAIMove) return;\n\n    try {\n      const formData = new URLSearchParams();\n      formData.append('column', column);\n\n      const response = await fetch('http://localhost:8080/move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: formData.toString(),\n      });\n\n      if (!response.ok) {\n        throw new Error('Move failed');\n      }\n\n      const data = await response.text();\n      const [boardState, gameState] = data.split('|');\n      \n      // Parse board state\n      const boardArray = boardState.split(',')\n        .filter(cell => cell !== '')\n        .map(Number);\n      \n      const newBoard = [];\n      for (let i = 0; i < 6; i++) {\n        newBoard.push(boardArray.slice(i * 7, (i + 1) * 7));\n      }\n      setBoard(newBoard);\n\n      // Parse game state\n      const [isOver, winnerValue] = gameState.split(',').map(Number);\n      setGameOver(isOver);\n      setWinner(winnerValue);\n\n      // If game is not over, trigger AI move after a delay\n      if (!isOver) {\n        setIsAIMove(true);\n        setTimeout(() => {\n          makeAIMove();\n        }, 1000);\n      }\n    } catch (error) {\n      console.error('Error making move:', error);\n    }\n  };\n\n  const makeAIMove = async () => {\n    try {\n      // Find available columns\n      const availableColumns = [];\n      for (let col = 0; col < 7; col++) {\n        if (board[0][col] === 0) {\n          availableColumns.push(col);\n        }\n      }\n\n      if (availableColumns.length > 0) {\n        // Randomly select a column\n        const randomCol = availableColumns[Math.floor(Math.random() * availableColumns.length)];\n        \n        const formData = new URLSearchParams();\n        formData.append('column', randomCol);\n\n        const response = await fetch('http://localhost:8080/move', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          body: formData.toString(),\n        });\n\n        if (!response.ok) {\n          throw new Error('AI move failed');\n        }\n\n        const data = await response.text();\n        const [boardState, gameState] = data.split('|');\n        \n        // Parse board state\n        const boardArray = boardState.split(',')\n          .filter(cell => cell !== '')\n          .map(Number);\n        \n        const newBoard = [];\n        for (let i = 0; i < 6; i++) {\n          newBoard.push(boardArray.slice(i * 7, (i + 1) * 7));\n        }\n        setBoard(newBoard);\n\n        // Parse game state\n        const [isOver, winnerValue] = gameState.split(',').map(Number);\n        setGameOver(isOver);\n        setWinner(winnerValue);\n      }\n    } catch (error) {\n      console.error('Error making AI move:', error);\n    } finally {\n      setIsAIMove(false);\n    }\n  };\n\n  const resetGame = async () => {\n    try {\n      console.log('Resetting game...');\n      const response = await fetch('http://localhost:8080/reset', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Reset failed');\n      }\n\n      await fetchBoardState();\n      setGameOver(false);\n      setWinner(0);\n      setIsAIMove(false);\n    } catch (error) {\n      console.error('Error resetting game:', error);\n    }\n  };\n\n  const getGameStatus = () => {\n    if (gameOver && winner !== 0) {\n      return winner === 1 ? \"You Win! ðŸŽ‰\" : \"AI Wins! ðŸ¤–\";\n    }\n    return isAIMove ? \"AI is thinking... ðŸ¤”\" : \"Your turn - Drop a piece! ðŸ‘‡\";\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Container maxWidth=\"sm\">\n        <Box sx={{ \n          display: 'flex', \n          flexDirection: 'column', \n          alignItems: 'center', \n          minHeight: '100vh',\n          py: 4\n        }}>\n          <Typography variant=\"h3\" component=\"h1\" gutterBottom>\n            Connect 4\n          </Typography>\n          \n          <Typography \n            variant=\"h5\" \n            color=\"primary\" \n            sx={{ \n              mb: 3,\n              fontWeight: 'bold',\n              textAlign: 'center'\n            }}\n          >\n            {getGameStatus()}\n          </Typography>\n\n          <GameBoard \n            board={board} \n            onColumnClick={makeMove}\n            gameOver={gameOver}\n            winner={winner}\n            onReset={resetGame}\n          />\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}