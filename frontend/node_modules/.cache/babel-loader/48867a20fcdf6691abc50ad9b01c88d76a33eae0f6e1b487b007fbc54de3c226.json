{"ast":null,"code":"var _jsxFileName = \"/Users/manan/school/APCS/Programming Projects/27MananG_FinalProject/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { Container, Box, Typography, Alert, Button } from '@mui/material';\nimport GameBoard from './components/GameBoard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = createTheme({\n  palette: {\n    mode: 'dark',\n    primary: {\n      main: '#ffeb3b' // Yellow for player 1\n    },\n    secondary: {\n      main: '#f50057' // Red for player 2 (AI)\n    }\n  }\n});\nfunction App() {\n  _s();\n  const [board, setBoard] = useState(Array(6).fill().map(() => Array(7).fill(0)));\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(0);\n  const [error, setError] = useState(null);\n  const [isAIMove, setIsAIMove] = useState(false);\n  const [winningPositions, setWinningPositions] = useState([]);\n  useEffect(() => {\n    fetchBoardState();\n  }, []);\n\n  // Add another useEffect to update status text when AI is thinking\n  useEffect(() => {\n    // This just ensures the UI updates when the AI is thinking\n  }, [isAIMove]);\n  const fetchBoardState = async () => {\n    try {\n      console.log(\"Fetching board state...\");\n      const response = await fetch('http://localhost:8080/board');\n      const data = await response.text();\n      console.log(\"Board data received:\", data);\n      const parts = data.split('|');\n      const boardState = parts[0];\n\n      // Parse game state - be careful with the format!\n      let isOver = 0;\n      let winnerValue = 0;\n      if (parts.length > 1) {\n        const gameStateParts = parts[1].split(',');\n        if (gameStateParts.length >= 2) {\n          isOver = parseInt(gameStateParts[0]);\n          winnerValue = parseInt(gameStateParts[1]);\n          console.log(`Game state parsed: isOver=${isOver}, winner=${winnerValue}`);\n        }\n      }\n\n      // Parse board state\n      const boardArray = boardState.split(',').filter(cell => cell !== '').map(Number);\n      const newBoard = [];\n      for (let i = 0; i < 6; i++) {\n        newBoard.push(boardArray.slice(i * 7, (i + 1) * 7));\n      }\n      setBoard(newBoard);\n\n      // Parse game state\n      const gameIsOver = isOver === 1;\n      setGameOver(gameIsOver);\n      setWinner(winnerValue);\n      console.log(\"Game state updated: gameOver =\", gameIsOver, \"winner =\", winnerValue);\n\n      // Parse winning positions if they exist\n      if (parts.length > 2 && isOver === 1 && winnerValue !== 0) {\n        const positions = parts[2].split(',').filter(pos => pos !== '').map(Number);\n        const winningPos = [];\n        for (let i = 0; i < positions.length; i += 2) {\n          if (i + 1 < positions.length) {\n            winningPos.push([positions[i], positions[i + 1]]);\n          }\n        }\n        setWinningPositions(winningPos);\n      } else {\n        setWinningPositions([]);\n      }\n\n      // Return whether the game is over\n      return gameIsOver;\n    } catch (error) {\n      console.error('Error fetching board state:', error);\n      return false;\n    }\n  };\n  const makeMove = async column => {\n    if (gameOver || isAIMove) {\n      console.log(\"Move rejected: gameOver =\", gameOver, \"isAIMove =\", isAIMove);\n      return;\n    }\n\n    // Immediately set isAIMove to true to prevent double clicks\n    setIsAIMove(true);\n    console.log(`Player making move in column ${column}`);\n    try {\n      // Update board preview locally for immediate feedback\n      const newBoard = JSON.parse(JSON.stringify(board)); // Deep copy\n      let validMove = false;\n      // Find lowest empty row in selected column\n      for (let row = 5; row >= 0; row--) {\n        if (newBoard[row][column] === 0) {\n          // Create a copy of the board and place the player's piece\n          newBoard[row][column] = 1; // Player is 1\n          setBoard(newBoard);\n          validMove = true;\n          console.log(`Player piece placed at row ${row}, column ${column}`);\n          break;\n        }\n      }\n      if (!validMove) {\n        console.log(\"Invalid move - column is full\");\n        setIsAIMove(false);\n        return;\n      }\n\n      // Now send the move to the server\n      const formData = new URLSearchParams();\n      formData.append('column', column);\n      console.log(\"Sending move to server...\");\n      const response = await fetch('http://localhost:8080/move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: formData.toString()\n      });\n      if (!response.ok) {\n        throw new Error('Move failed');\n      }\n\n      // Get latest board state from server and check if game is over\n      const isGameOver = await fetchBoardState();\n      console.log(\"After player move, gameOver =\", isGameOver);\n\n      // Check if the game is over after player's move\n      if (isGameOver) {\n        console.log(\"Game over after player move\");\n        setIsAIMove(false);\n        return;\n      }\n\n      // Make AI move with a small delay\n      console.log(\"Triggering AI move in 1 second...\");\n      setTimeout(makeAIMove, 1000);\n    } catch (error) {\n      console.error('Error making move:', error);\n      // Refresh board state to correct any inconsistencies\n      fetchBoardState();\n      setIsAIMove(false);\n    }\n  };\n\n  // A separate version of makeAIMove\n  const makeAITestMove = async () => {\n    // This is a test function for debugging\n    console.log(\"⚠️ Manual AI move triggered\");\n    makeAIMove();\n  };\n  const makeAIMove = async () => {\n    console.log(\"🤖 AI MAKING MOVE - START\");\n    try {\n      const aiResponse = await fetch('http://localhost:8080/ai-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      console.log(\"AI move response status:\", aiResponse.status);\n      if (!aiResponse.ok) {\n        throw new Error(`AI move failed with status ${aiResponse.status}`);\n      }\n      const responseText = await aiResponse.text();\n      console.log(\"AI move response body:\", responseText);\n\n      // Update the board\n      await fetchBoardState();\n    } catch (error) {\n      console.error('❌ Error making AI move:', error);\n      await fetchBoardState();\n    } finally {\n      console.log(\"🤖 AI MAKING MOVE - END\");\n      setIsAIMove(false);\n    }\n  };\n  const resetGame = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/reset', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Reset failed');\n      }\n      await fetchBoardState();\n      setGameOver(false);\n      setWinner(0);\n      setIsAIMove(false);\n      setWinningPositions([]);\n    } catch (error) {\n      console.error('Error resetting game:', error);\n    }\n  };\n  const getGameStatus = () => {\n    if (gameOver && winner !== 0) {\n      return winner === 1 ? \"You Won! 🎉\" : \"AI Won! 🤖\";\n    }\n    return isAIMove ? \"AI is thinking... 🤔\" : \"Your turn - Drop a piece! 👇\";\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"sm\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          minHeight: '100vh',\n          py: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          component: \"h1\",\n          gutterBottom: true,\n          children: \"Connect 4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          color: \"primary\",\n          sx: {\n            mb: 3,\n            fontWeight: 'bold',\n            textAlign: 'center'\n          },\n          children: getGameStatus()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n          board: board,\n          onColumnClick: makeMove,\n          gameOver: gameOver,\n          winner: winner,\n          onReset: resetGame,\n          winningPositions: winningPositions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"y99PSe17mtVHsvu8wrFGRPGPtUQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ThemeProvider","createTheme","CssBaseline","Container","Box","Typography","Alert","Button","GameBoard","jsxDEV","_jsxDEV","theme","palette","mode","primary","main","secondary","App","_s","board","setBoard","Array","fill","map","gameOver","setGameOver","winner","setWinner","error","setError","isAIMove","setIsAIMove","winningPositions","setWinningPositions","fetchBoardState","console","log","response","fetch","data","text","parts","split","boardState","isOver","winnerValue","length","gameStateParts","parseInt","boardArray","filter","cell","Number","newBoard","i","push","slice","gameIsOver","positions","pos","winningPos","makeMove","column","JSON","parse","stringify","validMove","row","formData","URLSearchParams","append","method","headers","body","toString","ok","Error","isGameOver","setTimeout","makeAIMove","makeAITestMove","aiResponse","status","responseText","resetGame","getGameStatus","children","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","sx","display","flexDirection","alignItems","minHeight","py","variant","component","gutterBottom","color","mb","fontWeight","textAlign","onColumnClick","onReset","_c","$RefreshReg$"],"sources":["/Users/manan/school/APCS/Programming Projects/27MananG_FinalProject/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { Container, Box, Typography, Alert, Button } from '@mui/material';\nimport GameBoard from './components/GameBoard';\n\nconst theme = createTheme({\n  palette: {\n    mode: 'dark',\n    primary: {\n      main: '#ffeb3b', // Yellow for player 1\n    },\n    secondary: {\n      main: '#f50057', // Red for player 2 (AI)\n    },\n  },\n});\n\nfunction App() {\n  const [board, setBoard] = useState(Array(6).fill().map(() => Array(7).fill(0)));\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(0);\n  const [error, setError] = useState(null);\n  const [isAIMove, setIsAIMove] = useState(false);\n  const [winningPositions, setWinningPositions] = useState([]);\n\n  useEffect(() => {\n    fetchBoardState();\n  }, []);\n\n  // Add another useEffect to update status text when AI is thinking\n  useEffect(() => {\n    // This just ensures the UI updates when the AI is thinking\n  }, [isAIMove]);\n\n  const fetchBoardState = async () => {\n    try {\n      console.log(\"Fetching board state...\");\n      const response = await fetch('http://localhost:8080/board');\n      const data = await response.text();\n      console.log(\"Board data received:\", data);\n      \n      const parts = data.split('|');\n      const boardState = parts[0];\n      \n      // Parse game state - be careful with the format!\n      let isOver = 0;\n      let winnerValue = 0;\n      \n      if (parts.length > 1) {\n        const gameStateParts = parts[1].split(',');\n        if (gameStateParts.length >= 2) {\n          isOver = parseInt(gameStateParts[0]);\n          winnerValue = parseInt(gameStateParts[1]);\n          console.log(`Game state parsed: isOver=${isOver}, winner=${winnerValue}`);\n        }\n      }\n      \n      // Parse board state\n      const boardArray = boardState.split(',')\n        .filter(cell => cell !== '')\n        .map(Number);\n      \n      const newBoard = [];\n      for (let i = 0; i < 6; i++) {\n        newBoard.push(boardArray.slice(i * 7, (i + 1) * 7));\n      }\n      setBoard(newBoard);\n\n      // Parse game state\n      const gameIsOver = isOver === 1;\n      setGameOver(gameIsOver);\n      setWinner(winnerValue);\n      console.log(\"Game state updated: gameOver =\", gameIsOver, \"winner =\", winnerValue);\n\n      // Parse winning positions if they exist\n      if (parts.length > 2 && isOver === 1 && winnerValue !== 0) {\n        const positions = parts[2].split(',')\n          .filter(pos => pos !== '')\n          .map(Number);\n        const winningPos = [];\n        for (let i = 0; i < positions.length; i += 2) {\n          if (i + 1 < positions.length) {\n            winningPos.push([positions[i], positions[i + 1]]);\n          }\n        }\n        setWinningPositions(winningPos);\n      } else {\n        setWinningPositions([]);\n      }\n      \n      // Return whether the game is over\n      return gameIsOver;\n    } catch (error) {\n      console.error('Error fetching board state:', error);\n      return false;\n    }\n  };\n\n  const makeMove = async (column) => {\n    if (gameOver || isAIMove) {\n      console.log(\"Move rejected: gameOver =\", gameOver, \"isAIMove =\", isAIMove);\n      return;\n    }\n\n    // Immediately set isAIMove to true to prevent double clicks\n    setIsAIMove(true);\n    console.log(`Player making move in column ${column}`);\n\n    try {\n      // Update board preview locally for immediate feedback\n      const newBoard = JSON.parse(JSON.stringify(board)); // Deep copy\n      let validMove = false;\n      // Find lowest empty row in selected column\n      for (let row = 5; row >= 0; row--) {\n        if (newBoard[row][column] === 0) {\n          // Create a copy of the board and place the player's piece\n          newBoard[row][column] = 1; // Player is 1\n          setBoard(newBoard);\n          validMove = true;\n          console.log(`Player piece placed at row ${row}, column ${column}`);\n          break;\n        }\n      }\n\n      if (!validMove) {\n        console.log(\"Invalid move - column is full\");\n        setIsAIMove(false);\n        return;\n      }\n\n      // Now send the move to the server\n      const formData = new URLSearchParams();\n      formData.append('column', column);\n\n      console.log(\"Sending move to server...\");\n      const response = await fetch('http://localhost:8080/move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: formData.toString(),\n      });\n\n      if (!response.ok) {\n        throw new Error('Move failed');\n      }\n\n      // Get latest board state from server and check if game is over\n      const isGameOver = await fetchBoardState();\n      console.log(\"After player move, gameOver =\", isGameOver);\n\n      // Check if the game is over after player's move\n      if (isGameOver) {\n        console.log(\"Game over after player move\");\n        setIsAIMove(false);\n        return;\n      }\n\n      // Make AI move with a small delay\n      console.log(\"Triggering AI move in 1 second...\");\n      setTimeout(makeAIMove, 1000);\n    } catch (error) {\n      console.error('Error making move:', error);\n      // Refresh board state to correct any inconsistencies\n      fetchBoardState();\n      setIsAIMove(false);\n    }\n  };\n\n  // A separate version of makeAIMove\n  const makeAITestMove = async () => {\n    // This is a test function for debugging\n    console.log(\"⚠️ Manual AI move triggered\");\n    makeAIMove();\n  };\n\n  const makeAIMove = async () => {\n    console.log(\"🤖 AI MAKING MOVE - START\");\n    \n    try {\n      const aiResponse = await fetch('http://localhost:8080/ai-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n\n      console.log(\"AI move response status:\", aiResponse.status);\n      \n      if (!aiResponse.ok) {\n        throw new Error(`AI move failed with status ${aiResponse.status}`);\n      }\n      \n      const responseText = await aiResponse.text();\n      console.log(\"AI move response body:\", responseText);\n\n      // Update the board\n      await fetchBoardState();\n    } catch (error) {\n      console.error('❌ Error making AI move:', error);\n      await fetchBoardState();\n    } finally {\n      console.log(\"🤖 AI MAKING MOVE - END\");\n      setIsAIMove(false);\n    }\n  };\n\n  const resetGame = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/reset', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Reset failed');\n      }\n\n      await fetchBoardState();\n      setGameOver(false);\n      setWinner(0);\n      setIsAIMove(false);\n      setWinningPositions([]);\n    } catch (error) {\n      console.error('Error resetting game:', error);\n    }\n  };\n\n  const getGameStatus = () => {\n    if (gameOver && winner !== 0) {\n      return winner === 1 ? \"You Won! 🎉\" : \"AI Won! 🤖\";\n    }\n    return isAIMove ? \"AI is thinking... 🤔\" : \"Your turn - Drop a piece! 👇\";\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Container maxWidth=\"sm\">\n        <Box sx={{ \n          display: 'flex', \n          flexDirection: 'column', \n          alignItems: 'center', \n          minHeight: '100vh',\n          py: 4\n        }}>\n          <Typography variant=\"h3\" component=\"h1\" gutterBottom>\n            Connect 4\n          </Typography>\n          \n          <Typography \n            variant=\"h5\" \n            color=\"primary\" \n            sx={{ \n              mb: 3,\n              fontWeight: 'bold',\n              textAlign: 'center'\n            }}\n          >\n            {getGameStatus()}\n          </Typography>\n\n          <GameBoard \n            board={board} \n            onColumnClick={makeMove}\n            gameOver={gameOver}\n            winner={winner}\n            onReset={resetGame}\n            winningPositions={winningPositions}\n          />\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}